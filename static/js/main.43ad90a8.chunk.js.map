{"version":3,"sources":["context/TaskListContext.js","components/Task.js","components/TaskList.js","components/TaskForm.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["TaskListContext","createContext","TaskListContextProvider","props","initialState","JSON","parse","localStorage","getItem","useState","tasks","setTasks","editItem","setEditItem","useEffect","setItem","stringify","Provider","value","addTask","title","id","uuidv4","removeTask","filter","task","clearList","findItem","item","find","editTask","newTasks","map","children","Task","useContext","className","onClick","TaskList","length","key","TaskForm","setTitle","onSubmit","e","preventDefault","onChange","target","type","placeholder","required","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.43ad90a8.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport const TaskListContext = createContext();\n\nconst TaskListContextProvider = (props) => {\n  const initialState = JSON.parse(localStorage.getItem(\"tasks\")) || [];\n\n  const [tasks, setTasks] = useState(initialState);\n\n  const [editItem, setEditItem] = useState(null);\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n\n  const addTask = (title) => {\n    setTasks([...tasks, { title, id: uuidv4() }]);\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n\n  const clearList = () => {\n    setTasks([]);\n  };\n\n  const findItem = (id) => {\n    const item = tasks.find((task) => task.id === id);\n\n    setEditItem(item);\n  };\n\n  const editTask = (title, id) => {\n    const newTasks = tasks.map((task) =>\n      task.id === id ? { title, id } : task\n    );\n    setTasks(newTasks);\n    setEditItem(null);\n  };\n\n  return (\n    <TaskListContext.Provider\n      value={{\n        tasks,\n        addTask,\n        removeTask,\n        clearList,\n        findItem,\n        editTask,\n        editItem,\n      }}\n    >\n      {props.children}\n    </TaskListContext.Provider>\n  );\n};\n\nexport default TaskListContextProvider;\n","import React, { useContext } from \"react\";\nimport { TaskListContext } from \"../context/TaskListContext\";\n\nconst Task = ({ task }) => {\n  const { removeTask, findItem } = useContext(TaskListContext);\n\n  return (\n    <li className=\"list-item\">\n      <span>{task.title}</span>\n      <div>\n        <button\n          onClick={() => removeTask(task.id)}\n          className=\"btn-delete task-btn\"\n        >\n          <i className=\"fas fa-trash-alt\"> </i>\n        </button>\n        <button onClick={() => findItem(task.id)} className=\"btn-edit task-btn\">\n          <i className=\"fas fa-pen\"> </i>\n        </button>\n      </div>\n    </li>\n  );\n};\n\nexport default Task;\n","import React, { useContext } from \"react\";\nimport { TaskListContext } from \"../context/TaskListContext\";\nimport Task from \"./Task\";\n\nconst TaskList = () => {\n  const { tasks } = useContext(TaskListContext);\n\n  return (\n    <div>\n      {tasks.length ? (\n        <ul className=\"list\">\n          {tasks.map((task) => {\n            return <Task task={task} key={task.id} />;\n          })}\n        </ul>\n      ) : (\n        <div className=\"no-tasks\">Nothing to do!</div>\n      )}\n    </div>\n  );\n};\n\nexport default TaskList;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { TaskListContext } from \"../context/TaskListContext\";\n\nconst TaskForm = () => {\n  const { addTask, clearList, editItem, editTask } = useContext(\n    TaskListContext\n  );\n  const [title, setTitle] = useState(\"\");\n\n  const handleChange = (e) => {\n    setTitle(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!editItem) {\n      addTask(title);\n      setTitle(\"\");\n    } else {\n      editTask(title, editItem.id);\n    }\n  };\n\n  useEffect(() => {\n    if (editItem) {\n      setTitle(editItem.title);\n    } else {\n      setTitle(\"\");\n    }\n  }, [editItem]);\n\n  return (\n    <form onSubmit={handleSubmit} className=\"form\">\n      <input\n        onChange={handleChange}\n        value={title}\n        type=\"text\"\n        className=\"task-input\"\n        placeholder=\"Add a new task...\"\n        required\n      />\n      <div className=\"buttons\">\n        <button type=\"submit\" className=\"btn add-task-btn\">\n          {editItem ? \"Edit Task\" : \"Add Task\"}\n        </button>\n        <button onClick={clearList} className=\"btn clear-btn\">\n          Clear\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default TaskForm;\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <h1>Task Manager</h1>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport TaskList from \"./components/TaskList\";\nimport TaskForm from \"./components/TaskForm\";\nimport Header from \"./components/Header\";\nimport TaskListContextProvider from \"./context/TaskListContext\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <TaskListContextProvider>\n      <div className=\"container\">\n        <div className=\"app-wrapper\">\n          <div className=\"main\">\n            <Header />\n            <TaskForm />\n            <TaskList />\n          </div>\n        </div>\n      </div>\n    </TaskListContextProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}